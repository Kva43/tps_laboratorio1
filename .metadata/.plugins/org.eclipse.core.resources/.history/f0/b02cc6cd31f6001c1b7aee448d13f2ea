#include <stdio.h>
#include <stdlib.h>
#include "Controller.h"
#include "LinkedList.h"
#include "parser.h"
#include "Passenger.h"


/** \brief Carga los datos de los pasajeros desde el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListPassenger LinkedList*
 * \return int
 *
 */
int controller_loadFromText(char* path , LinkedList* pArrayListPassenger)
{
	int retorno=-1;
	FILE* pFile;
	if(pArrayListPassenger != NULL && path != NULL)
	{
		pFile = fopen(path,"r");
		if(parser_FromText(pFile, pArrayListPassenger)==0)
		{
			retorno = 0;
		}
	}
	return retorno;
}

/** \brief Carga los datos de los pasajeros desde el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListPassenger LinkedList*
 * \return int
 *
 */
int controller_loadFromBinary(char* path , LinkedList* pArrayListPassenger)
{
    return 1;
}

/** \brief Alta de pasajero
 *
 * \param path char*
 * \param pArrayListPassenger LinkedList*
 * \return int
 *
 */
//int id;
//char nombre[50];
//char apellido[50];
//float precio;
//char tipoPasajero[50];
//char codigoVuelo[50];
//char estadoVuelo[50];
int controller_addPassenger(LinkedList* pArrayListPassenger)
{
	int retorno = -1;
	Passenger* pPuntero;
	if(utn_getNumero(pPuntero->id, "\n", "\nERROR\n", 0, 10000, 2) == 0 &&
			utn_getNombre(pPuntero->nombre, CHAR_LEN, "\n", "\nERROR\n", 2) == 0 &&
			utn_getNombre(pPuntero->apellido, CHAR_LEN, "\n", "\nERROR\n", 2) == 0 &&
			utn_getNumeroFlotante(pPuntero->precio, "\n", "\nERROR\n", 1, 900000, 2) == 0 &&
			utn_getAlfanumerica(pPuntero->tipoPasajero, v, "\n", "\nERROR\n", 2) == 0 &&
			utn_getAlfanumerica(pPuntero->codigoVuelo, CHAR_LEN, "\n", "\nERROR\n", 2) == 0 &&
			utn_getNombre(pPuntero->estadoVuelo, CHAR_LEN, "\n", "\nERROR\n", 2) == 0)
	{
		puntero = Passenger_newParametrosTxt(id,nombre,apellido,precio,tipoPasajero,codigoVuelo,estadoVuelo);
		if(puntero != NULL)
		{
			if(ll_add(pArrayListServicios, puntero)==0)
			{
				retorno = 0;
				puntero->isEmpty = -1;
			}
		}
	}
    return retorno;
}

/** \brief Modificar datos de pasajero
 *
 * \param path char*
 * \param pArrayListPassenger LinkedList*
 * \return int
 *
 */
int controller_editPassenger(LinkedList* pArrayListPassenger)
{
    return 1;
}

/** \brief Baja de pasajero
 *
 * \param path char*
 * \param pArrayListPassenger LinkedList*
 * \return int
 *
 */
int controller_removePassenger(LinkedList* pArrayListPassenger)
{
    return 1;
}

/** \brief Listar pasajeros
 *
 * \param path char*
 * \param pArrayListPassenger LinkedList*
 * \return int
 *
 */
int controller_ListPassenger(LinkedList* pArrayListPassenger)
{
	int retorno = -1;
	Passenger* a;
	int id;
	char nombre[CHAR_LEN];
	char apellido[CHAR_LEN];
	float precio;
	char tipoPasajero[CHAR_LEN];
	char codigoVuelo[CHAR_LEN];
	char estadoVuelo[CHAR_LEN];
	a = pArrayListPassenger->pFirstNode->pNextNode->pElement;

	for(int i=0; i<ll_len(pArrayListPassenger);i++)
	{
		a = ll_get(pArrayListPassenger, i);
		if(Passenger_getId(a, &id) == 0 &&
			Passenger_getNombre(a, nombre) == 0 &&
			Passenger_getApellido(a, apellido) == 0 &&
			Passenger_getPrecio(a, &precio) == 0 &&
			Passenger_getTipoPasajero(a, tipoPasajero) == 0 &&
			Passenger_getCodigoVuelo(a, codigoVuelo) == 0 &&
			Passenger_getEstadoVuelo(a, estadoVuelo) == 0 &&
			a->isEmpty == -1)
		{
			retorno = 0;
			printf("%d, %s, %s, %.2f, %s, %s, %s\n",id,nombre,apellido,precio,tipoPasajero,codigoVuelo,estadoVuelo);
		}

	}
	return retorno;
}

/** \brief Ordenar pasajeros
 *
 * \param path char*
 * \param pArrayListPassenger LinkedList*
 * \return int
 *
 */
int controller_sortPassenger(LinkedList* pArrayListPassenger)
{
    return 1;
}

/** \brief Guarda los datos de los pasajeros en el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListPassenger LinkedList*
 * \return int
 *
 */
int controller_saveAsText(char* path , LinkedList* pArrayListPassenger)
{
    return 1;
}

/** \brief Guarda los datos de los pasajeros en el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListPassenger LinkedList*
 * \return int
 *
 */
int controller_saveAsBinary(char* path , LinkedList* pArrayListPassenger)
{
    return 1;
}


